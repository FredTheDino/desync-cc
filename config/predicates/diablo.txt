predicate always diablo1a(reg_a: r64, reg_b: r64, reg_c: r64) {
   /* "7y^2-1!=x^2 */
   andq         $16383,%reg_c
   andq         $65535,%reg_a
   imulq        %reg_c, %reg_c
   leaq         0(,%reg_c,8), %reg_b
   subq         %reg_c, %reg_b
   decq         %reg_b
   imulq        %reg_a, %reg_a
   cmpq         %reg_a, %reg_b
   jnz DESYNC
}

predicate never diablo1n(reg_a: r64, reg_b: r64, reg_c: r64) {
   /* "7y^2-1!=x^2 */
   andq         $16383,%reg_c
   andq         $65535,%reg_a
   imulq        %reg_c, %reg_c
   leaq         0(,%reg_c,8), %reg_b
   subq         %reg_c, %reg_b
   decq         %reg_b
   imulq        %reg_a, %reg_a
   cmpq         %reg_a, %reg_b
   jz DESYNC
}

predicate always diablo2a(reg_a: r64, reg_b: r64) {
   /* 1) 2|x+x^2 {{{ */
   andq         $32767,%reg_a
   /* Opaque predicate*/
   movq         %reg_a, %reg_b
   imulq        %reg_a, %reg_b
   addq         %reg_b, %reg_a
   andq         $1, %reg_a
   jz DESYNC
}

predicate never diablo2n(reg_a: r64, reg_b: r64) {
   /* 1) 2|x+x^2 {{{ */
   andq         $32767,%reg_a
   /* Opaque predicate*/
   movq         %reg_a, %reg_b
   imulq        %reg_a, %reg_b
   addq         %reg_b, %reg_a
   andq         $1, %reg_a
   ja DESYNC
}

predicate always diablo3a(reg_a: r32) {
   /* 2) 3|(x^3-x) {{{ */
   andl         $1023,%reg_a
   movl         %reg_a, %eax
   imull        %reg_a, %eax
   imull        %reg_a, %eax
   subl         %reg_a, %eax
   movl         $3, %edx
   movl         %edx, %reg_a
   cltd                  
   idivl        %reg_a
   testl        %edx, %edx
   jbe DESYNC
}

predicate never diablo3n(reg_a: r32) {
   /* 2) 3|(x^3-x) {{{ */
   andl         $1023,%reg_a
   movl         %reg_a, %eax
   imull        %reg_a, %eax
   imull        %reg_a, %eax
   subl         %reg_a, %eax
   movl         $3, %edx
   movl         %edx, %reg_a
   cltd                  
   idivl        %reg_a
   testl        %edx, %edx
   jg DESYNC
}

predicate always diablo4a(reg_a: r64) {
   /* 3) x^2>=0{{{ */
   andq         $65535,%reg_a
   imulq        %reg_a, %reg_a
   testq        $0, %reg_a
   jns DESYNC
}

predicate never diablo4n(reg_a: r64) {
   /* 3) x^2>=0{{{ */
   andq         $65535,%reg_a
   imulq        %reg_a, %reg_a
   testq        $0, %reg_a
   js DESYNC
}

predicate always diablo5a(reg_a: r32) {
   /* 4) 2|x+x {{{ */
   andl         $2147483647,%reg_a
   addl         %reg_a, %reg_a
   andl         $1, %reg_a
   jp DESYNC
}

predicate never diablo5n(reg_a: r32) {
   /* 4) 2|x+x {{{ */
   andl         $2147483647,%reg_a
   addl         %reg_a, %reg_a
   andl         $1, %reg_a
   jnp DESYNC
}

predicate always diablo6a(reg_a: r32) {
   /* 5) 2|x+x {{{ */
   /* Take a (maybe) life variable */
   movl         %eax, %reg_a
   andl         $2147483647,%reg_a
   addl         %reg_a, %reg_a
   andl         $1, %reg_a
   jp DESYNC
}

predicate never diablo6n(reg_a: r32) {
   /* 5) 2|x+x {{{ */
   /* Take a (maybe) life variable */
   movl         %eax, %reg_a
   andl         $2147483647,%reg_a
   addl         %reg_a, %reg_a
   andl         $1, %reg_a
   jnp DESYNC
}

predicate always diablo7a(reg_a: r64) {
   /* 6) 2|x*x/2 Arboit {{{ */
   andq         $65535,%reg_a
   imulq        %reg_a,%reg_a
   shrq         $1,%reg_a
   andq         $1,%reg_a
   testq        %reg_a,%reg_a
   jle DESYNC
}

predicate never diablo7n(reg_a: r64) {
   /* 6) 2|x*x/2 Arboit {{{ */
   andq         $65535,%reg_a
   imulq        %reg_a,%reg_a
   shrq         $1,%reg_a
   andq         $1,%reg_a
   testq        %reg_a,%reg_a
   jnz DESYNC
}